name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  SERVER_USER: ${{ secrets.SERVER_USER }}
  SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  # Job 1: Construir y probar
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Instalar dependencias del Backend
        working-directory: ./backend
        run: npm ci

      - name: Instalar dependencias del Frontend
        working-directory: ./frontend
        run: npm ci

      - name: Lint Backend
        working-directory: ./backend
        run: npm run lint || echo "No lint script"

      - name: Lint Frontend
        working-directory: ./frontend
        run: npm run lint || echo "No lint script"

      # - name: Tests Backend
      #   working-directory: ./backend
      #   run: npm test || echo "No test script"

      # - name: Tests Frontend
      #   working-directory: ./frontend
      #   run: npm test || echo "No test script"

  # Job 2: Construir y subir imágenes Docker
  build-and-push:
    name: Build and Push Docker Images
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extraer metadata para Backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/proyectosti-backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build y Push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/proyectosti-backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/proyectosti-backend:buildcache,mode=max

      - name: Extraer metadata para Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/proyectosti-frontend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build y Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/proyectosti-frontend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/proyectosti-frontend:buildcache,mode=max

  # Job 3: Desplegar en el servidor
  deploy:
    name: Deploy to Production Server
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Instalar sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Crear directorio en el servidor
        run: |
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
            "sudo mkdir -p /var/www/proyectostivalpo && sudo chown -R ${{ secrets.SERVER_USER }}:${{ secrets.SERVER_USER }} /var/www/proyectostivalpo"

      - name: Crear archivo .env temporal
        run: |
          cat > .env.prod << EOF
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_PORT=${{ secrets.SMTP_PORT }}
          SMTP_USER=${{ secrets.SMTP_USER }}
          SMTP_PASS=${{ secrets.SMTP_PASS }}
          ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
          NODE_ENV=production
          EOF

      - name: Copiar archivos al servidor
        run: |
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -o StrictHostKeyChecking=no \
            docker-compose.yml \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/var/www/proyectostivalpo/
          
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -o StrictHostKeyChecking=no \
            .env.prod \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/var/www/proyectostivalpo/.env

      - name: Desplegar en el servidor
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            cd /var/www/proyectostivalpo
            
            # Login a Docker Hub
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            
            # Detener contenedores actuales
            docker compose down
            
            # Eliminar imágenes antiguas
            docker image prune -af
            
            # Pull nuevas imágenes
            docker compose pull
            
            # Iniciar contenedores con nuevas imágenes
            docker compose up -d
            
            # Esperar a que los servicios estén listos
            sleep 10
            
            # Verificar estado
            docker compose ps
            
            # Ver logs recientes
            docker compose logs --tail=50
            
            echo "✅ Despliegue completado exitosamente"

      - name: Verificar deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            cd /var/www/proyectostivalpo
            
            # Verificar que todos los contenedores están corriendo
            if [ $(docker compose ps -q | wc -l) -eq 3 ]; then
              echo "✅ Todos los contenedores están corriendo"
              exit 0
            else
              echo "❌ Error: No todos los contenedores están corriendo"
              docker compose ps
              exit 1
            fi

      - name: Notificar éxito
        if: success()
        run: |
          echo "🎉 Despliegue exitoso!"
          echo "Sitio: https://proyectostivalpo.com"
          echo "Commit: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"

      - name: Notificar fallo
        if: failure()
        run: |
          echo "❌ Despliegue falló"
          echo "Revisar logs en GitHub Actions"
